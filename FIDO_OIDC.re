
= FIDOとOpenID Connecctの関係性について


こんにちは@super_readerです。普段は認証やID連携のことをやっており、その中でも主にFIDO(特にWebAuthn)を扱っているWebエンジニアです。
@<br>{}今回FIDOに関してなにかネタはないかと考えたときに、自分が一番最初にFIDOを知ったときに困ったことを書いたら、読んでくださる方の役にたつのでは思いました。

そこで、私が今回は「FIDOとOpenID Connectの関係性」について書きたいと思います。

そこで、今回話したい題材は以下になります。
 1. OpenID ConnectにとってのFIDOとは？
 2. OpenID ConnectとFIDOでのRelying Partyについて
 3. FIDOとSelf-issuedについて

それではさっそくFIDOとOIDCの関係を見てみましょう。

== OpenID ConnectにとってのFIDOとは？
まずはOpenID Connect(OIDC)に関して簡単に説明したいと思います。
@<br>{}OIDCはID連携の仕様の一つです。
ID連携とは連携先のサービス(Relying Party)に対して、IDやパスワードを渡すことなく、ユーザーの認証情報を提供して、OpenId Providerに保存されているユーザーデータ（属性情報）にアクセスすることが可能になる仕組みのことを指します。
@<br>{}ID連携の仕様の一つであるOIDCは現在さまざまなサービスで使われている仕様になります。
@<br>{}また、OpenId Providerは認証と認可の機能、そして、サービスがほしい属性情報を持っているサービスになります。
具体的な例としてはGoogleやYahoo! JAPANなどのID Provider(IdP)を指します。

このようなID連携の具体的な例としては、とあるサービスでID登録をしようとしたときに、Googleにログインした後、ID登録に必要な名前や住所などの属性情報をGoogleから取得して、ID登録時に必要な情報を予め埋めておくなどがあります。

簡単にID連携に関して説明をさせていただきましたが、OIDCに関して、それぞれの細かな仕様のここでの説明は割愛させていただきます。
(全部書いてしまうと、とても長くなってしまうので)
@<br>{}その代わり以下にOIDCの理解に役立ちそうなサイトのリンクを記載させていただきます。
 * @<href>{https://qiita.com/TakahikoKawasaki/items/498ca08bbfcc341691fe,一番分かりやすい OpenID Connect の説明}
 * @<href>{https://speakerdeck.com/nov/oauth-2-dot-0-and-openid-connect-ji-chu-at-openid-meetup-fukuoka,OAuth2.0 & OpenID Connect基礎}
 * @<href>{https://www.slideshare.net/kura_lab/openid-connect-id,OpenID Connnect入門}


さて、本題に入りたいと思います。
@<br>{}OIDCとFIDOの関係を考えていく上でまずは、OIDCがどのような流れで処理をされているのかを見てみましょう。
@<br>{}以下はOIDCのフローの一つであるAuthorization Codeフローを簡単に書いたものになります。(@<img>{OIDC})

//image[OIDC][Authorization Codeフロー]

@<img>{OIDC}はID連携を行いたいサービス(Relying Party)が、OpenId Provider(OP)の発行する認可用のAccess Tokenを使い、属性情報を取得するためのフローになります。
@<br>{}このフローの中でも書かれていますがRelying Partyに認可トークンを渡すために「ユーザー認証」を行っています。
@<br>{}OIDCの使用説明の中にOPTIONですが認証方法(Authentication Methods References)について以下のような記述があります。
//quote{
認証時に用いられた認証方式を示す識別子文字列の JSON 配列. 例として, パスワードと OTP 認証が両方行われたことを示すといったケースが考えられる.
@<b>{amr Claim にどのような値を用いるかは本仕様の定めるところではない.}
この値の意味するところはコンテキストによって異なる可能性があるため, この Claim を利用する場合は, 関係者間で値の意味するところについて合意しておくこと.
amr は大文字小文字を区別する文字列である.
//}
@<br>{}このように、OIDCの仕様の中でも認証方法に関しては認証方法については仕様で細かく言及されていません。
@<br>{}これは言い換えると、認証方法に関してはOPの実装方法に委ねられているということが言えます。

さて、ここでFIDO(WebAuthn)の認証フローを見てみましょう。

//image[FIDO][WebAuthnの認証フロー]

わざとらしく書いてますが、@<img>{FIDO}を見てみるとFIDOの仕様は認証だけで閉じています。
@<br>{}ここで気にしてほしいこととして、FIDOは認証の仕様ということです。
@<br>{}なので、OIDCのAuthorization Codeフローでも書かれていた「ユーザー認証」の部分にFIDOをそっくりそのまま入れ込むことができます。
@<br>{}これは、OPがFIDO対応の認証手段を持っていた場合にOIDCのフローの中にFIDOを組み込むことが可能ということを示しています。
@<br>{}以下の図はOIDCのAuthorization CodeフローにFIDO(WebAuthn)のフローを追加したものになります。

//image[FIDOinOIDC][Authorization CodeフローにFIDOのフローを追加した図]

自分で描いてみた図ですが、長いですね。

このように、ID連携の仕様であるOIDCと認証の仕組みであるFIDOは同居することが可能であり、組み合わせることでID連携をしたいサービスでもFIDOを使った認証体験を実現することが可能となります。

この仕組みが実際に行われているのがYahoo!ID連携です。
@<br>{}実際の画面フローをもとにどのような処理が行われているのかたどっていきましょう。

ヤフーID連携のフロー図(後で入れます)

このようにしてOIDCとFIDOは共存することが可能であることがわかります。


== OpenID ConnectとFIDOでのRelying Partyについて
私がFIDOを一番最初に学んだときに一番最初に引っかかった部分がここでした。
@<br>{}突然ですが、先程見てみたAuthorizationフローにFIDOのフローを追加した図(@<img>{FIDOinOIDC})をもう一度見てみましょう。

@<img>{FIDOinOIDC}の中にはRelying Party(RP)という単語が2回出てきます。
@<br>{}OIDCとFIDOの両方で登場するこの単語なのですが、２つの仕様で指し示すサービスが違います。

OIDCの中ではID連携を行いたいサービスをRPと呼び、FIDOでは主にID Provider(OIDCではOPとなっている部分)のことをRPと呼びます。
@<br>{}同じID関連の仕様なのに同じ単語で違う意味合いになっているのはなぜでしょうか？

@<br>{}このRPが二箇所で出てきてしまったいる問題を考えるにあたって、RPの元々の意味を考える必要が出てきます。
@<br>{}ID関連の仕様で使われているRPの元々の意味を「認証(本人検証)を委任しているサービス」と捉えることにより、この疑問は解消されるはずです。
（ここではわかりやすく考えるためOpenID Provider = ID Providerと考えてください）

OIDCの場合
//quote{
  ID連携を行いたいサービス（RP）がOPに対して認証(本人検証)を委任している
//}
FIDOの場合
//quote{
  ID Provider(RP)が認証器(Authenticator)に対して認証(本人検証)を委任している
//}
という風に解釈できます。

よくあるパスワードでのログインをする場合などにおいてID Providerが認証(本人確認)を委任することは基本的にはないのですが、
FIDOの文脈ではID Providerが認証（本人確認）を認証器(Authenticator)に委任しています。

そのためOIDCの枠組みにFIDOを導入しようと思った場合、認証(本人確認)は@<img>{OIDC-FIDO-RP}のように委任を繰り返します。
//image[OIDC-FIDO-RP][それぞれのRPの関係]

FIDOを学び始めたとき、最初は同じ意味を指している単語だと思い、自分の解釈が間違っていると思いRPという単語で混乱していました。
@<br>{}しかし、RPという言葉の意味をよく考えてみると矛盾なく、同じ単語でサービスが違っているのかも理解することができます。


== FIDOとSelf-issuedについて
突然ですが、OIDCの仕様の中にも認証をどうするかについて書かれた@<b>{Self-issued}という仕様があります。

参考：@<href>{https://openid.net/specs/openid-connect-core-1_0.html#SelfIssued}

この仕様を簡単に説明すると

 1. OIDCにおける認証部分において、OpenID Providerの認証機能をローカルデバイスの中に持っていき、認証を行う
 2. 認証方法は公開鍵暗号方式を使ったもので、秘密鍵などのクレデンシャル情報はローカルデバイスの中に保存する

 などが挙げられます。

 実際にOIDCの枠組みを使い、Self-issuedを取り入れている企業としてはリクルートが有名です。

 さて、先程簡単に説明させていただいた特徴をどこかで見たことがないでしょうか。
@<br>{}そうです。FIDO認証で使われている仕組みによく似ています。

 実際に実装を行った、リクルートの仕組みでも端末側で鍵ペアを作成したり、
 公開鍵をサーバー上で管理したりなど、
 大雑把な技術的な構成だけを考えたらFIDOとあまり変わらないことを行っています。

 もちろん細かなパラメーターの渡し方などに関しては大きく違います。
 あくまで、公開鍵暗号方式を用いてログインをするという点に関しては同じという意味で話しています。

では、FIDOとSelf-issuedの違いは何でしょうか？
@<br>{}私自身ここに関してはいろいろわからない部分が多く今回有識者にヒアリングなどをしつつ自分なりに考えてみました。

まず、FIDOとSelf-issuedを考えるときは、技術的な視点ではなくFIDOやOIDCの枠組みを考える必要があります。
@<br>{}先程から何回か出ていますが、OIDCはID連携の仕様、FIDOは認証の仕様という風にそれぞれの立場(レイヤー)が違います。

Self-issuedはあくまでID連携から派生した仕様であり、基本的には認可トークンをどのように発行するかが重要で、認証はそのための手段です。
なので、Self-issuedを使いたい場合もOIDCの


なので、FIDOとSelf-issuedを考えたときに僕が思ったのが
//quote{
@<b>{手段は一緒だけど、そもそもの向いている目的が違う}
//}
という解釈になりました。


//}
